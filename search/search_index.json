{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nbdev-mkdocs-4rc0-test","text":"<p>This file will become your README and also the index of your documentation.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install nbdev_mkdocs_4rc0_test\n</code></pre>"},{"location":"#how-to-use","title":"How to use","text":"<p>Fill me in please! Don\u2019t forget code examples:</p> <pre><code>1+1\n</code></pre> <pre><code>2\n</code></pre>"},{"location":"00_core/","title":"core","text":"<p>source</p>"},{"location":"00_core/#foo","title":"foo","text":"<pre><code> foo ()\n</code></pre>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>nbdev-mkdocs-4rc0-test</li> <li>core</li> <li>guides<ul> <li>Basic User Guide</li> </ul> </li> <li>API<ul> <li>nbdev_mkdocs_4rc0_test<ul> <li>core<ul> <li>foo</li> </ul> </li> </ul> </li> </ul> </li> <li>CLI<ul> <li>Not found</li> </ul> </li> <li>Releases</li> </ul>"},{"location":"changelog_not_found/","title":"Releases","text":""},{"location":"changelog_not_found/#changelogmd-file-not-found","title":"CHANGELOG.md file not found.","text":"<p>To generate the changelog file, please run the following command from the project root directory. </p> <pre><code>nbdev_changelog\n</code></pre> <p>If you do not want this page to be rendered as part of the documentation, please remove the following line from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- [Releases]{changelog}\n</code></pre>"},{"location":"cli_commands_not_found/","title":"No CLI commands found in console_scripts in settings.ini file.","text":"<p>For documenting CLI commands, please add command line executables in <code>console_scripts</code> in <code>settings.ini</code> file. </p> <p>If you do not want this page to be rendered as part of the documentation, please remove the following lines from the mkdocs/summary_template.txt file and build the docs again.</p> <pre><code>- CLI\n{cli}\n</code></pre>"},{"location":"api/nbdev_mkdocs_4rc0_test/core/foo/","title":"foo","text":""},{"location":"api/nbdev_mkdocs_4rc0_test/core/foo/#nbdev_mkdocs_4rc0_test.core.foo","title":"<code>nbdev_mkdocs_4rc0_test.core.foo()</code>","text":"Source code in <code>nbdev_mkdocs_4rc0_test/core.py</code> <pre><code>def foo(): pass\n</code></pre>"},{"location":"guides/Basic_User_Guide/","title":"Basic User Guide","text":"<p>This guide will walk you through the process of creating documentation for nbdev projects using Material for nbdev.</p>"},{"location":"guides/Basic_User_Guide/#quick-summary","title":"Quick summary","text":"<p>Here\u2019s a quick comparison of Quarto and Material for nbdev development workflows:</p> <p>Note</p> <p>Note that there are five types of callouts, including: <code>note</code>, <code>warning</code>, <code>important</code>, <code>tip</code>, and <code>caution</code>.</p> <p>Tip with Title</p> <p>This is an example of a callout with a title.</p> Expand To Learn About Collapse <p>This is an example of a 'folded' caution callout that can be expanded by the user. You can use <code>collapse=\"true\"</code> to collapse it by default or <code>collapse=\"false\"</code> to make a collapsible callout that is expanded by default.</p> Quarto workflow Material for nbdev workflow   Install:  <pre><code>$ pip install notebook nbdev\n$ nbdev_install_quarto\n</code></pre>   Install:  <pre><code>$ pip install notebook nbdev\n$ nbdev_install_quarto\n$ pip install nbdev-mkdocs\n</code></pre>   Setup:  <pre><code>$ nbdev_new\n$ nbdev_install_hooks\n$ vi settings.ini\n$ pip install -e '.[dev]'\n</code></pre>   Setup:  <pre><code>$ nbdev_new\n$ nbdev_install_hooks\n$ vi settings.ini\n$ pip install -e '.[dev]'\n$ nbdev_mkdocs new\n$ vi mkdocs/mkdocs.yml\n</code></pre>   Development:  <pre><code># Edit files\n$ nbdev_preview\n</code></pre>   Development:  <pre><code># Edit files\n$ nbdev_mkdocs preview\n</code></pre>   Commit changes:  <pre><code>$ nbdev_prepare\n$ git commit -am \u201cCommit message\u201d\n$ git push\n</code></pre>   Commit changes:  <pre><code>$ nbdev_mkdocs prepare\n$ git commit -am \u201cCommit message\u201d\n$ git push\n</code></pre>"},{"location":"guides/Basic_User_Guide/#installation","title":"Installation","text":"<p>To complete this tutorial, you will need the following software and Python library:</p> <ol> <li>Python</li> <li>pip Python package manager</li> <li>Jupyter Notebook</li> <li>nbdev</li> <li>Quarto</li> <li>nbdev-mkdocs</li> </ol> <p>It is recommended to use a virtual environment for your Python projects. Virtual environments are a common and effective Python development technique that helps to keep dependencies required by different projects separate by creating isolated Python environments for them.</p> <p>In this tutorial, we will be using Python\u2019s venv module to create a virtual environment.</p> <p>Note</p> <p>There are other great third-party tools for creating virtual environments, such as conda and virtualenv, For basic usage, venv is an excellent choice because it already comes packaged with your Python installation. Any of these tools can help you set up a Python virtual environment.</p> <p>Warning</p> <p>There are other great third-party tools for creating virtual environments, such as conda and virtualenv, For basic usage, venv is an excellent choice because it already comes packaged with your Python installation. Any of these tools can help you set up a Python virtual environment.</p> <p>Important</p> <p>There are other great third-party tools for creating virtual environments, such as conda and virtualenv, For basic usage, venv is an excellent choice because it already comes packaged with your Python installation. Any of these tools can help you set up a Python virtual environment.</p> <p>Tip</p> <p>There are other great third-party tools for creating virtual environments, such as conda and virtualenv, For basic usage, venv is an excellent choice because it already comes packaged with your Python installation. Any of these tools can help you set up a Python virtual environment.</p> <p>Caution</p> <p>There are other great third-party tools for creating virtual environments, such as conda and virtualenv, For basic usage, venv is an excellent choice because it already comes packaged with your Python installation. Any of these tools can help you set up a Python virtual environment.</p> <p>Tip with Title</p> <p>This is an example of a callout with a title.</p> <p>Tip with Title</p> <p>This is a callout with a title.</p> Expand To Learn About Collapse <p>This is an example of a 'folded' caution callout that can be expanded by the user. You can use <code>collapse=\"true\"</code> to collapse it by default or <code>collapse=\"false\"</code> to make a collapsible callout that is expanded by default.</p> Expand To Learn About Collapse <p>This is an example of a 'folded' caution callout that can be expanded by the user. You can use <code>collapse=\"true\"</code> to collapse it by default or <code>collapse=\"false\"</code> to make a collapsible callout that is expanded by default.</p> <p>Using callouts is an effective way to highlight content that your reader give special consideration or attention.</p> <p>Using callouts is an effective way to highlight content that your reader give special consideration or attention.</p>"},{"location":"guides/Basic_User_Guide/#creating-and-activating-a-new-python-virtual-environment","title":"Creating and activating a new Python virtual environment","text":"<p>To create a new virtual environment with venv, open a new terminal session in the root directory of your new project and run the command below:</p> <pre><code>python3 -m venv venv\n</code></pre> <p>The above command creates a new virtual environment called venv. Please feel free to change the name if necessary.</p> <p>Now your project has its own virtual environment. Generally, before you start using it, you\u2019ll first need to activate the environment. Run the below command to activate your new virtual environment:</p> <pre><code>source venv/bin/activate\n</code></pre>"},{"location":"guides/Basic_User_Guide/#installing-the-packages","title":"Installing the packages","text":"<p>Before we begin installing our project dependencies, let us first upgrade pip to ensure we are using the most recent packages by running the following command:</p> <pre><code>python3 -m pip install --upgrade pip\n</code></pre> <p>Now, install the Python packages required for our project by running the following command:</p> <pre><code>pip install notebook nbdev nbdev-mkdocs\n</code></pre> <p>Enter y (for yes) if prompted. Installation should take a few seconds, during which text will be printed in the terminal.</p> <p>After installing the Python packages, run the following command in the terminal to install Quarto via nbdev\u2019s CLI command:</p> <pre><code>nbdev_install_quarto\n</code></pre> <p>If prompted, enter your password in the terminal to continue installing Quarto. You can read\u00a0the source code of the nbdev_install_quarto command for more information. Alternatively, you can follow the Quarto\u2019s official installation instructions.</p>"},{"location":"guides/Basic_User_Guide/#first-steps","title":"First steps","text":"<p>In this section, we will use the nbdev and nbdev-mkdocs commands to configure our new project with tests, continuous integration, and a documentation website built with Material for Mkdocs.</p>"},{"location":"guides/Basic_User_Guide/#creating-a-new-github-repo","title":"Creating a new GitHub repo","text":"<p>Create an empty GitHub repo using the convenient link github.com/new. If you get stuck, you might find GitHub\u2019s Create a repo page helpful.</p> <p>For this example, let\u2019s name our repo nbdev_mkdocs_tutorial (feel free to change it) and add a nice description, as nbdev will use it later.</p> <p>Note</p> <p>Don\u2019t add a README file, .gitignore, or license file just yet. nbdev will create necessary files when we Initialise the repo with nbdev new command</p> <p>If you\u2019re using the web interface, it should look something like this before you click Create Repository:</p> <p></p> <p>Now, click the Create Repository button to create a new repo.</p> <p>You should then be redirected to your new repo:</p> <p></p> <p>Before we continue, there is one last step we need to do. Go to the Settings tab and click on Actions -&gt; General on the left side. Scroll down to the bottom of the screen and find the Workflow Permissions section. Make sure the Read and Write permissions is selected. If it is not, change it and then click Save button.</p> <p>Note</p> <p>Please ensure that the <code>Read and Write permissions</code> is selected under the <code>Workflow Permissions</code> section or the deploy action will fail.</p> <p></p>"},{"location":"guides/Basic_User_Guide/#initialising-your-repo-with-nbdev","title":"Initialising your repo with nbdev","text":"<p>Now clone your repo from the same terminal window. If you get stuck here, you might find GitHub\u2019s Cloning a repository page helpful.</p> <p>Since we created a repo named nbdev_mkdocs_tutorial, we can clone it as follows:</p> <p>Note</p> <p>In the following command:</p> <ul> <li>Replace {user} with your github username</li> <li>If you have used a different name for your repo, replace nbdev_mkdocs_tutorial with it.</li> </ul> <pre><code>git clone https://github.com/{user}/nbdev_mkdocs_tutorial.git\n</code></pre> <p>Then cd (change directory) to our repo:</p> <p>Note</p> <p>In the following command:</p> <ul> <li>If you have used a different name for your repo, replace nbdev_mkdocs_tutorial with it.</li> </ul> <pre><code>cd nbdev_mkdocs_tutorial\n</code></pre> <p>nbdev provides the nbdev_new command to initialise an empty git repository. It\u2019ll infer information about your project from git and GitHub, and ask you to input anything remaining.</p> <p>Let\u2019s initialise our repo with nbdev by entering the following command:</p> <pre><code>nbdev_new\n</code></pre> <p>It may ask you to enter information that it couldn\u2019t infer from git or GitHub.</p> <p>Note</p> <p>nbdev_new assumes that your package name is the same as your repo name (with - replaced by _). Use the --lib_name option if that isn\u2019t the case.</p>"},{"location":"guides/Basic_User_Guide/#initialising-your-repo-with-nbdev-mkdocs","title":"Initialising your repo with nbdev-mkdocs","text":"<p>After you\u2019ve installed nbdev-mkdocs, you can bootstrap your project documentation using the nbdev_mkdocs executable. From the project root directory and run the following command:</p> <pre><code>nbdev_mkdocs new\n</code></pre> <p>Using information from the project\u2019s settings.ini file, the above command creates files and directories required to build the documentation and saves it in the mkdocs subdirectory.</p>"},{"location":"guides/Basic_User_Guide/#previewing-the-docs-locally","title":"Previewing the docs locally","text":"<p>To preview the Mkdocs for Material documentation locally, we must first install our library. To do so, execute the following command from the project\u2019s root directory:</p> <pre><code>pip install -e '.[dev]'\n</code></pre> <p>Now, run the following command to preview your documentation:</p> <pre><code>nbdev_mkdocs preview\n</code></pre> <p>Note</p> <p>If you encounter the error <code>No module named nbdev_mkdocs_tutorial</code> while executing the above command, please add your project root directory to the <code>PYTHONPATH</code> environment variable. One way to do this is by executing the following command from the project root directory. <pre><code>    export PYTHONPATH=$PYTHONPATH:`pwd`\n</code></pre></p> <p>In our example, the documentation will be served at the following URL:</p> <p>Note</p> <ul> <li>If you have used a different name for your repo, replace nbdev_mkdocs_tutorial with it in the below command.</li> <li>By default, the documentation will be served on port 4000. However, you can change the port by passing the --port argument to the nbdev_mkdocs preview command. For more information, please run the nbdev_mkdocs preview --help.</li> </ul> <pre><code>http://0.0.0.0:4000/nbdev_mkdocs_tutorial/\n</code></pre> <p>Now, copy and paste the above URL into your preferred browser, and the documentation should look something like this:</p> <p></p> <p>When you switch to the black theme, the page will look like this:</p> <p></p> <p>The website\u2019s navigation structure can be divided into two parts. The first section is built by reading the <code>sidebar.yml</code> or <code>_quarto.yml</code> file from the nbs directory. The second part of the navigation structure includes specific sections for the API, CLI, and Releases.</p> <p>Now it\u2019s time to commit your changes to git and publish the documentation to GitHub Pages. We recommend running the <code>nbdev_mkdocs prepare</code> command in the terminal before committing to Git, which exports the library, tests and cleans notebooks, and generates the README file if necessary.</p> <pre><code>nbdev_mkdocs prepare\n</code></pre> <p>Finally, double-check your settings.ini file and push your changes to GitHub</p> <p>Note</p> <p>Before pushing to GitHub, please ensure that the latest version of <code>nbdev-mkdocs</code> is included in the <code>dev_requirements</code> section of the <code>settings.ini</code> file.</p> <pre><code>git add .\ngit commit -m'Initial commit'\ngit push\n</code></pre>"},{"location":"guides/Basic_User_Guide/#checking-out-your-workflows-and-docs","title":"Checking out your workflows and docs","text":"<p>From the GitHub web interface, open GitHub Actions by clicking the Actions tab near the top of your repo page. You should see two workflow runs:</p> <ol> <li>CI - The CI workflow clears the unwanted metadata from notebook and     runs the tests.</li> <li>Deploy to GitHub Pages \u2013 Builds your docs with Material for Mkdocs     and deploys it to GitHub Pages.</li> </ol> <p>Note that you\u2019ll need to enable GitHub Pages for your repo before you can access your docs website. We\u2019ll do that now.</p> <p>Once the above two actions are completed successfully, you can enable it for your repo by clicking on the Settings tab near the top-right of your repo page, then Pages on the left, then setting the Branch to gh-pages, and finally clicking Save.</p> <p>It should look similar to this after you click Save:</p> <p></p> <p>Head back to GitHub Actions and you should see a new workflow run: pages build and deployment. As the name says, this workflow deploys your website contents to GitHub Pages.</p> <p>Wait for the workflow run to complete, then open your website. By default it should be available at:</p> <p>Note</p> <p>In the following URL:</p> <ul> <li>Replace {user} with your github username.</li> <li>If you have used a different name for your repo, replace nbdev_mkdocs_tutorial with it.</li> </ul> <pre><code>https://{user}.github.io/nbdev_mkdocs_tutorial\n</code></pre>"},{"location":"guides/Basic_User_Guide/#recap","title":"Recap","text":"<p>You now have a base nbdev repo with continuous integration and hosted documentation! Here\u2019s a recap of the steps you took:</p> <ul> <li>Created a GitHub repo.</li> <li>Initialised your repo with nbdev_new.</li> <li>Initialised your repo with nbdev_mkdocs new.</li> <li>Installed the package with pip install \u2018.[dev]\u2019.</li> <li>Previewed the documentation with nbdev_mkdocs preview.</li> <li>Exported the library, tested it, and cleaned the notebooks using   nbdev_mkdocs prepare.</li> <li>Pushed to GitHub.</li> </ul>"},{"location":"guides/Basic_User_Guide/#adding-documentation","title":"Adding documentation","text":"<p>In this section, you\u2019ll will learn how to add documentation for functions, classes, and CLI commands.</p>"},{"location":"guides/Basic_User_Guide/#installing-hooks-for-git-friendly-notebooks","title":"Installing hooks for git-friendly notebooks","text":"<p>When working with Jupyter notebooks in a new repo, the first step is to install nbdev\u2019s hooks. See Git-friendly Jupyter for more information.</p> <p>Install the nbdev\u2019s hooks by running the following command into your terminal:</p> <pre><code>nbdev_install_hooks\n</code></pre> <p>Note</p> <p>You can also add new requirements to your project by editing the settings.ini file. When you do so, please make sure to install the library locally by running <code>pip install -e '.[dev]'</code> command. Otherwise, you will not have the new requirements installed in your environment.</p> <p>Now, let\u2019s start the Jupyter notebooks by executing the command below:</p> <pre><code>jupyter notebook\n</code></pre> <p>Note: Before continuing, please ensure that the jupyter notebook is running on the newly created virtual environment.</p> <p>This should open the Jupyter home page in a new browser tab:</p> <p></p>"},{"location":"guides/Basic_User_Guide/#documenting-a-function","title":"Documenting a function","text":"<p>Now, let\u2019s add a sample docstring to an existing function in <code>00_core.ipynb</code> notebook. Please open the <code>00_core.ipynb</code> notebook present inside the <code>nbs</code> directory and add the docstring <code>Docstring for foo</code> to the function <code>foo</code>, or copy and replace the cell contents with the below sample code:</p> <pre><code>#| export\ndef foo(): \n\"\"\"Docstring for `foo`\"\"\"\n    pass\n</code></pre> <p>After adding the docstring, save the notebook and run the following command in the terminal to preview the changes in the browser:</p> <pre><code>nbdev_mkdocs preview\n</code></pre> <p>Click on the <code>API</code> menu in the sidebar, and the documentation should look like:</p> <p></p> <p>Now let\u2019s add a new function in the same notebook, create a new code cell below the <code>foo</code> function cell and paste the following code:</p> <pre><code>#| export\ndef say_hello(to: str) -&gt; str:\n\"\"\"Say hello to somebody\n\n    Args:\n        to: Name to say `hello`\n\n    Returns:\n        A string with `Hello` prepended to the `to`\n    \"\"\"\n    return f'Hello {to}'\n</code></pre> <p>Save the notebook, stop the server and re-run the <code>nbdev_mkdocs preview</code> command to preview your changes.</p> <p>Click on the <code>API</code> menu in the sidebar, and the documentation should look like:</p> <p></p>"},{"location":"guides/Basic_User_Guide/#documenting-a-class","title":"Documenting a class","text":"<p>Now, in the same notebook, create a new code cell below the <code>say_hello</code> function cell and paste the following code:</p> <pre><code>#| export\nclass HelloSayer:\n\"\"\"Say hello to `to` using `say_hello`\"\"\"\n    def __init__(self, to): self.to = to\n\n    def say(self):\n\"\"\"Do the saying\"\"\"\n        return say_hello(self.to)\n</code></pre> <p>Save the notebook, stop the server and re-run the <code>nbdev_mkdocs preview</code> command to preview your changes.</p> <p>Click on the <code>API</code> menu in the sidebar, and the documentation should look like:</p> <p></p>"},{"location":"guides/Basic_User_Guide/#documenting-a-cli-command","title":"Documenting a CLI command","text":"<p>Before we get started writing documentation for our first CLI command, let\u2019s take a look at what we already have in the CLI documentation. Just click on the CLI menu in the sidebar to view it. The documentation should look like:</p> <p></p> <p>This default page will be displayed when the <code>console_scripts</code> section of the <code>settings.ini</code> file does not include any command line executables.</p> <p>Now let\u2019s move on to writing our first CLI command and adding it to the documentation.</p> <p>Let\u2019s now convert our <code>say_hello</code> function into a command-line script and generate documentation for it by following the steps below:</p> <p>Create a new code cell above the <code>say_hello</code> function cell and copy paste the below code to import the <code>call_parse</code> from <code>fastcore</code>:</p> <pre><code>#| export\nfrom fastcore.script import call_parse\n</code></pre> <p>Add the <code>call_parse</code> decorator to our <code>say_hello</code> function. After adding the decorator, the <code>say_hello</code> function should look like:</p> <pre><code>#| export\n@call_parse\ndef say_hello(to: str) -&gt; str:\n\"\"\"Say hello to somebody\n\n    Args:\n        to: Name to say `hello`\n\n    Returns:\n        A string with `Hello` prepended to the `to`\n    \"\"\"\n    return f'Hello {to}'\n</code></pre> <p>Save the notebook and run the following command from the project root directory to add the console script to the settings.ini file:</p> <pre><code>echo \"console_scripts = say_hello=nbdev_mkdocs_tutorial.core:say_hello\" &gt;&gt; settings.ini\n</code></pre> <p>Finally, run the following commands in the terminal to build the library and preview the changes in the browser:</p> <pre><code>pip install '.[dev]' &amp;&amp; nbdev_mkdocs preview\n</code></pre> <p>Click on the <code>CLI</code> menu in the sidebar, and the documentation should look like: </p> <p><code>nbdev-mkdocs</code> will also generate documentation for CLI commands created using Typer and populates the same under the CLI tab.</p>"}]}